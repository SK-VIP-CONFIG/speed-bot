import logging
import struct
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from telegram import Update
from telegram.ext.callbackcontext import CallbackContext

import os

# Logging
logging.basicConfig(level=logging.INFO)
TOKEN = "7432795021:AAGMOoMf9GtHwmk8DHTS03ydH1MEAKeqx1k"  # üîÅ ‡§Ø‡§π‡§æ‡§Å ‡§Ö‡§™‡§®‡§æ Telegram Bot Token ‡§°‡§æ‡§≤‡•ã

# Value Mappings (original values for replacing)
value_mappings = {
    "KNOCK SPEED": -0.64,
    "STAND BACK SPEED": -143.9,
    "STAND RIGHT SPEED": -119.9,
    "CROUCH SPEED": -135.25,
    "BACK CROUCH SPEED": -103.28,
    "RIGHT CROUCH SPEED": -86.05,
    "PRONE SPEED": -359.5,
    "PRONE BACK/RIGHT": -20.0,
    "SPRINT SPEED": 160.5
}

# Float to hex bytes
def float_to_hex_bytes(value):
    return struct.pack('<f', value)

# Modify float value in file
def modify_file(file_path, search_value, new_value):
    with open(file_path, 'rb') as f:
        data = f.read()
    search = float_to_hex_bytes(search_value)
    replace = float_to_hex_bytes(new_value)

    if search in data:
        data = data.replace(search, replace, 1)
        with open(file_path, 'wb') as f:
            f.write(data)
        return True
    return False

# /start command
def start(update: Update, context: CallbackContext):
    update.message.reply_text("üëã ùêíùêûùêßùêù ùêåùêû ùêö .ùêÆùêûùê±ùê© ùê®ùê´ .ùêùùêöùê≠ ùêÖùê¢ùê•ùêû ùêÄùêßùêù ùêà‚Äôùê•ùê• ùêåùê®ùêùùê¢ùêüùê≤ ùêàùê≠ ùêÖùê®ùê´ ùêòùê®ùêÆ !")

# File upload handler
def handle_file(update: Update, context: CallbackContext):
    file = update.message.document
    if not file.file_name.endswith(('.uexp', '.dat')):
        update.message.reply_text("‚ùå Only .uexp or .dat files are supported!")
        return

    file_path = f"./{file.file_name}"
    file.get_file().download(file_path)
    context.user_data['file_path'] = file_path

    update.message.reply_text(
        "‚úÖ ùêÖùê¢ùê•ùêû ùêëùêûùêúùêûùê¢ùêØùêûùêù ! ùêçùê®ùê∞ ùêíùêûùêßùêù ùêçùêûùê∞ ùêïùêöùê•ùêÆùêûùê¨ ùêàùêß ùêìùê°ùê¢ùê¨ ùêÖùê®ùê´ùê¶ùêöùê≠:\n\n"
        "üìë ùêÇùê®ùê©ùê≤ ùêìùê°ùêû ùêÖùê®ùê´ùê¶ùêöùê≠ ùêÜùê¢ùêØùêûùêß ùêÅùêûùê•ùê®ùê∞, ùêÑùêùùê¢ùê≠ ùêàùê≠ùê¨ ùêïùêöùê•ùêÆùêûùê¨ ùêÄùêßùêù ùêíùêûùêßùêù ùêàùê≠.\n"
        "```Format:\n"
        "KNOCK SPEED: -0.64\n"
        "STAND BACK SPEED: -143.9\n"
        "STAND RIGHT SPEED: -119.9\n"
        "CROUCH SPEED: -135.25\n"
        "BACK CROUCH SPEED: -103.28\n"
        "RIGHT CROUCH SPEED: -86.05\n"
        "PRONE SPEED: -359.5\n"
        "PRONE BACK/RIGHT: -20.0\n"
        "SPRINT SPEED: 160.5\n```",
        parse_mode="Markdown"
    )

# Text message handler (multi-line value edit)
def handle_text(update: Update, context: CallbackContext):
    if 'file_path' not in context.user_data:
        update.message.reply_text("‚ùó ùêÖùê¢ùê´ùê¨ùê≠ ùêíùêûùêßùêù ùêö .ùêÆùêûùê±ùê© ùêéùê´ .ùêùùêöùê≠ ùêÖùê¢ùê•ùêû.")
        return

    try:
        text = update.message.text.strip()
        lines = text.split('\n')
        file_path = context.user_data['file_path']

        results = []
        for line in lines:
            if ':' not in line:
                continue
            name, val = line.split(':', 1)
            name = name.strip().upper()
            try:
                new_val = float(val.strip())
            except ValueError:
                results.append(f"‚ùå {name}: Invalid number.")
                continue

            if name not in value_mappings:
                results.append(f"‚ùå {name}: Not a valid key.")
                continue

            old_val = value_mappings[name]
            success = modify_file(file_path, old_val, new_val)

            if success:
                results.append(f"‚úÖ {name}: Modified.")
            else:
                results.append(f"‚ö†Ô∏è {name}: Value not found.")

        update.message.reply_text('\n'.join(results))
        update.message.reply_document(open(file_path, 'rb'))
    except Exception as e:
        update.message.reply_text(f"‚ö†Ô∏è Error: {e}")

# Main function
def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.document, handle_file))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()


